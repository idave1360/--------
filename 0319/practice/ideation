chatGPT와 함께하는 코딩수업이니 아이디어부터 함께 탐색해볼까?

우선 chatGPT에게 오늘의 프로젝트 진행 과정을 가볍게 학습시키자
1. CSS 없이 웹 페이지를 만든다
2. CSS를 입힌다.
3. 일부 스타일을 변경한다.
4. 완성

만들어 볼만한 웹페이지 아이디어를 chatGPT에게 물어보자
프롬프트: HTML과 CSS를 연습하기 위해 만들어볼만한 웹 페이지 아이디어가 있을까? 10개의 아이디어와 각각에 대한 100자 이내의 설명을 포함해서 리스트를 만들어줘
답변:
1. 개인 포트폴리오 사이트: 자신의 작업을 보여주는 갤러리와 이력서를 포함한다.
2. 레스토랑 메뉴 페이지: 식당의 메뉴, 위치, 영업 시간을 표시한다.
3. 일기 예보 사이트: 현재 위치 기반의 날씨와 일기 예보를 제공한다.
4. 이벤트 카운트다운 타이머: 특정 이벤트까지 남은 시간을 실시간으로 보여준다.
5. 블로그 템플릿: 글쓰기와 이미지를 위한 깔끔한 레이아웃을 제공한다.
6. 인터랙티브 퀴즈: 사용자가 참여할 수 있는 다양한 퀴즈를 제공한다.
7. 피트니스 트랙킹 페이지: 운동 목표와 진행 상황을 추적한다.
8. 요리 레시피 사이트: 요리법과 재료 목록을 상세히 보여준다.
9. 갤러리/포토 앨범: 여행 사진이나 아트워크를 멋지게 보여줄 수 있다.
10. 개인 일정 관리자: 할 일 목록과 캘린더를 포함하여 일정을 관리한다.

난이도와 관심사에 따라 아이디어 결정
1. 이벤트 카운트다운 타이머
2. 개인 일정 관리자

좀 더 창의적인 아이디어는 없을까?
교수님의 예시: 핑퐁 게임


우선 첫 번째 이벤트 카운트다운 타이머
초기 프롬프트:
위에서 제시해준 아이디어 중 이벤트 카운트다운 타이머를 먼저 만들어볼거야.

최종적으로 만들고 싶은 웹사이트 형태를 먼저 설명할게.

화면 중앙에는 타이머가 존재해. 타이머는 시간, 분, 초가 00:00:00의 형태로 표시되어 있어.
초기 상태는 00:00:00이고 이벤트가 주어졌을 때 시간이 표시될거야.

화면 중앙 하단에는 버튼이 존재해.
각 버튼에는 지금 시간으로부터 2시간 내의, 30분 혹은 정각 시간이 적혀있어
ex. 지금이 10시 40분이라면 , 11시 / 11시 30분 / 12시 / 12시 30분이 적힌 버튼

버튼을 클릭하면 화면 중앙에 타이머가 누른 버튼에 표시된 시간까지 남은 시간을 출력해. 이 때 한 번 버튼을 누른 이후에는 타이머가 지속적으로 감소해.

타이머가 다 되고 나면 화면 전체가 붉은 색으로 점멸하며, 타이머가 끝났다는 것을 알려줘.

어때 우선 내가 만들고자하는 사이트를 이해했어?

CSS 없이
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>이벤트 카운트다운 타이머</title>
</head>
<body>
  <div style="text-align: center; position: relative; top: 50%; transform: translateY(-50%);">
    <div id="timer" style="font-size: 48px; margin-bottom: 30px;">00:00:00</div>
    <button>11:00</button>
    <button>11:30</button>
    <button>12:00</button>
    <button>12:30</button>
  </div>
</body>
</html>

의도한 바와는 조금 다르지만.. 일단 CSS 추가
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>이벤트 카운트다운 타이머</title>
<style>
  body, html {
    height: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-family: 'Arial', sans-serif;
    background-color: #f0f0f0;
  }
  #timer {
    font-size: 5rem; /* 5rem은 약 80px */
    margin-bottom: 30px;
  }
  button {
    font-size: 1.25rem; /* 1.25rem은 약 20px */
    margin: 5px;
    padding: 10px 20px;
    background-color: #ddd;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  button:hover {
    background-color: #ccc;
  }
</style>
</head>
<body>
  <div>
    <div id="timer">00:00:00</div>
    <button>11:00</button>
    <button>11:30</button>
    <button>12:00</button>
    <button>12:30</button>
  </div>
</body>
</html>

JavaScript 포함하여 수정
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>이벤트 카운트다운 타이머</title>
<style>
  body, html {
    height: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-family: 'Arial', sans-serif;
    background-color: #f0f0f0;
  }
  #timer {
    font-size: 5rem; /* 5rem은 약 80px */
    margin-bottom: 30px;
  }
  button {
    font-size: 1.25rem; /* 1.25rem은 약 20px */
    margin: 5px;
    padding: 10px 20px;
    background-color: #ddd;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  button:hover {
    background-color: #ccc;
  }
  .hidden {
    display: none;
  }
</style>
</head>
<body>
  <div>
    <div id="timer">00:00:00</div>
    <div id="buttons"></div>
  </div>
<script>
function updateTimeButtons() {
  const now = new Date();
  const buttonsContainer = document.getElementById('buttons');
  buttonsContainer.innerHTML = ''; // Clear existing buttons

  for (let i = 0; i <= 2; i++) {
    const hour = new Date(now.getTime() + i * 30 * 60000);
    const button = document.createElement('button');
    button.textContent = `${hour.getHours()}:${hour.getMinutes() === 0 ? '00' : '30'}`;
    button.onclick = function() { startTimer(hour); };
    buttonsContainer.appendChild(button);
  }
}

function startTimer(endTime) {
  const interval = setInterval(function() {
    const now = new Date();
    const distance = endTime - now;
    if (distance < 0) {
      clearInterval(interval);
      document.body.style.backgroundColor = "red";
      alert("타이머가 끝났습니다!");
      document.body.style.backgroundColor = "";
      updateTimeButtons(); // Reset buttons for next use
      return;
    }
    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);
    document.getElementById('timer').textContent = 
      `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }, 1000);
}

updateTimeButtons();
</script>
</body>
</html>

코드 작동시키며 수정수정

편의를 위해 결과물 단순화..ㅎㅎ
버튼에는 그냥 고정된 숫자로 1, 5, 10, 30의 시간이 표시되고
현재 시간과 무관하게 그냥 타이머로 작동하는 걸로 하자

최종 코드
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>이벤트 카운트다운 타이머</title>
<style>
  body, html {
    height: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-family: 'Arial', sans-serif;
    background-color: #f0f0f0;
  }
  #timer {
    font-size: 5rem;
    margin-bottom: 30px;
  }
  button {
    font-size: 1.25rem;
    margin: 5px;
    padding: 10px 20px;
    background-color: #ddd;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  button:hover {
    background-color: #ccc;
  }
</style>
</head>
<body>
  <div id="timer">00:00:00</div>
  <button onclick="startTimer(1)">1 분</button>
  <button onclick="startTimer(5)">5 분</button>
  <button onclick="startTimer(10)">10 분</button>
  <button onclick="startTimer(30)">30 분</button>

<script>
let interval;

function startTimer(minutes) {
  clearInterval(interval); // Clear any existing intervals
  const endTime = new Date(new Date().getTime() + minutes * 60000);

  interval = setInterval(function() {
    const now = new Date();
    const distance = endTime - now;
    if (distance < 0) {
      clearInterval(interval);
      document.body.style.backgroundColor = "red";
      alert("타이머가 끝났습니다!");
      document.body.style.backgroundColor = "";
      document.getElementById('timer').textContent = "00:00:00";
      return;
    }
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);
    document.getElementById('timer').textContent = 
      `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }, 1000);
}
</script>
</body>
</html>

비슷한 방식으로 두 개 더

이벤트 관리자 기본 스펙
텍스트를 입력할 수 있는 공간과 버튼이 있어.
텍스트를 입력하고 버튼을 누르면 화면 중앙에 해당 텍스트가 적힌 버튼이 정렬돼.
그 버튼을 클릭하면 버튼의 텍스트에 취소선이 그어지고, 한 번 더 누르면 삭제돼.

그 다음은 뭐할까나

다음과 같은 간단하면서도 재미있는 웹 페이지 아이디어를 제안해볼게요:

단어 찾기 게임: 페이지에 흩어진 글자들 사이에서 특정 단어를 찾는 게임.
컬러 매칭 게임: 사용자가 무작위로 생성된 색상의 리스트에서 같은 색상을 찾아 클릭하는 게임.
간단한 퍼즐 맞추기: 몇 개의 퍼즐 조각을 올바른 위치로 드래그 앤 드롭하는 게임.
가위바위보 게임: 간단한 가위바위보 게임으로 컴퓨터와 대결한다.
메모리 카드 게임: 카드를 뒤집어서 같은 이미지를 가진 쌍을 찾는 기억력 게임.
빠르게 사라지는 버튼 클릭하기: 짧은 시간 동안만 화면에 나타나는 버튼을 클릭하면 점수를 얻는 게임.
화면을 가로지르는 오브젝트 피하기: 사용자가 마우스로 화면 아래에 있는 오브젝트를 조종하여 떨어지는 물체들을 피하는 게임.
이런 게임들은 HTML과 CSS로 기본적인 레이아웃과 스타일을 구성하고, 자바스크립트로 인터랙티브한 요소를 추가하여 구현할 수 있습니다. 이 게임들은 로직도 간단하고 구현하기 쉬우며, 사용자에게 재미있는 경험을 제공할 수 있습니다.

가위바위보 게임으로 가자